estimate_bma_params_scemua <- function(model_predictions, observed_values, N = 500, itermax = 5000, tol=1e-6,T0 = 1.0, cooling_rate = 0.99) {
  
  #Run the Full SCEM-UA Optimization
  # Initialize SCEM-UA
  K <- length(model_predictions)
  pop <- initialize_population(K, N)
  likelihoods <- apply(pop, 1, function(params) bma_likelihood_gamma(params, model_predictions, observed_values))
  
  best_likelihood <- max(likelihoods)
  prev_best_likelihood <- -Inf  
  T <- T0  # Initial temperature for simulated annealing
  
  for (iter in 1:itermax) {
    # Select the top 20% best candidates
    top_indices <- order(likelihoods, decreasing = TRUE)[1:ceiling(N * 0.2)]
    top_pop <- pop[top_indices, , drop = FALSE]
    
    # **Simulated Annealing: Probabilistic Acceptance**
    new_candidates <- t(apply(top_pop, 1, function(p) metropolis_step(p, bma_likelihood_gamma, model_predictions, observed_values)))
    
    # Introduce mutations
    mutated_candidates <- new_candidates + matrix(rnorm(length(new_candidates), mean = 0, sd = 0.05), 
                                                  nrow = nrow(new_candidates))
    
    # Evaluate new candidates
    new_likelihoods <- apply(mutated_candidates, 1, function(params) bma_likelihood_gamma(params, model_predictions, observed_values))
    
    # **Metropolis Acceptance Criterion**
    for (i in 1:length(top_indices)) {
      likelihood_diff <- new_likelihoods[i] - likelihoods[top_indices[i]]
      if (likelihood_diff > 0 || runif(1) < exp(likelihood_diff / T)) {
        pop[top_indices[i], ] <- mutated_candidates[i, ]
        likelihoods[top_indices[i]] <- new_likelihoods[i]
      }
    }
    
    # Reduce temperature (cooling schedule)
    T <- T * cooling_rate
    
    # Track best likelihood
    prev_best_likelihood <- best_likelihood
    best_likelihood <- max(likelihoods)
    
    # Print progress
    if (iter %% 100 == 0) {
      cat("Iteration:", iter, "Best Likelihood:", best_likelihood, "Temperature:", T, "\n")
    }
    
    # **Stopping Criterion: Check Convergence**
    if (abs(best_likelihood - prev_best_likelihood) < tol) {
      cat("Converged at iteration:", iter, "\n")
      break
    }
  }
  
  # Return best parameters
  best_params <- pop[which.max(likelihoods), ]
  
  return(list(
    weights = best_params[1:K],
    b = best_params[(K + 1):(2 * K)],
    c1 = best_params[2 * K + 1]
  ))
}
